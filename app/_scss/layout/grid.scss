@charset "utf-8";

/*
 * grid.sass
 * Created by Aki Braun
 * https://github.com/gesa/fluid-to-em-grid
 * Use as you wish. Not my fault if things break.
 * Class names inspired by the smart-grid created by Daniel Ryan
 * (https://github.com/dryan/css-smart-grid/)
 * v0.2, 2012/10/07
 * v0.3, 2013/06/01
 * v0.4, 2014/02/18
 *
 * This grid creates a mixin you can use anywhere (though I don't really
 * recommend below about 50rem where 1rem equals 16px) to generate a fluid
 * inner grid, basically a grid to use inside your grid. (yo dawg...). All you
 * have to do is pass in a prefix for your columns class.
 */

/* * Variables * * \
 * While the calculated grid is output using ems and rems, the below variables
 * should be set using your targeted pixel sides. Skip the units, those will be
 * calculated automatically. $remSize refers to the font size of the root
 * element in pixels.
 */

$remSize: 10;

$columnNames: two, three, four, five, six, seven, eight, nine, ten, eleven, twelve;
$marginNames: offset-one, offset-two, offset-three, offset-four, offset-five, offset-six, offset-seven, offset-eight, offset-nine, offset-ten, offset-eleven;

// Viewport sizes:
// - $small is where the fluid grid begins
// - $standard is where the grid transitions from fluid to rem
$small: 600;
$standard: 960;
$large: 1200;
$hidef: 1600;

@mixin generateColumns($column, $gutter) {
  $i: 2;
  @each $className in $columnNames {
    &.#{$className} {
      width: ($column * $i) + ($gutter * ($i - 1));
    }
    $i: $i + 1;
  }
}

@mixin generateMargins($column, $gutter) {
  $i: 1;
  @each $className in $marginNames {
    &.#{$className} {
      margin-left: ($column * $i) + ($gutter * ($i + 1));
      &:first-child {
        margin-left: ($column * $i) + ($gutter * $i);
      }
    }
    $i: $i + 1;
  }
}

@mixin gridGenerator($viewport: $standard, $prefix: '') {

  $column: (100 * .0625) * 1%;
  $container: auto;

  @if $viewport >= $standard {
    $container: ($viewport - 40) / $remSize * 1rem;
    $column: $container * .0625;
  }

  $gutter: $column / 3;
  $margin: $gutter / 2;

  .#{$prefix}container {
    padding: 1rem $gutter / 2;
    width: $container;

    .#{$prefix}columns {
      float: left;
      margin-left: $gutter;
      width: $column;
      &:first-child, &.first {
        margin-left: 0;
      }
      @include generateColumns($column, $gutter);
      @include generateMargins($column, $gutter);
    }
  }
}

.container {
  clear: both;
  margin: 0 auto;
  padding: 1rem;
}

.row::after {
  content: ".";
  clear: both;
  display: block;
  height: 0;
  visibility: hidden;
}

@media screen and (min-width: #{$small / 16}em) {
  @include gridGenerator($small);
}

@media screen and (min-width: #{$standard / 16}em) {
  @include gridGenerator($standard);
}

@media screen and (min-width: #{$large / 16}em) {
  @include gridGenerator($large);
}
